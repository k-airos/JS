{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://2048/./js/common.js","webpack://2048/./js/number.js","webpack://2048/./js/grid.js","webpack://2048/./js/2048.js"],"sourcesContent":["class Common{\n\n    setColor(e){\n        // if(typeof e)\n        if(typeof e === \"object\"){\n            if(e.dataset.value%128 === 2) e.style.backgroundColor = '#F44336';\n            if(e.dataset.value%128 === 4) e.style.backgroundColor = '#7E07A9';\n            if(e.dataset.value%128 === 8) e.style.backgroundColor = 'yellow';\n            if(e.dataset.value%128 === 16) e.style.backgroundColor = '#67237F';\n            if(e.dataset.value%128 === 32) e.style.backgroundColor = '#EA69A6';\n            if(e.dataset.value%128 === 64) e.style.backgroundColor = '#270672';\n            if(e.dataset.value%128 === 0) e.style.backgroundColor = '#8D6DD7';\n        } else{\n            document.querySelector('.game').style.backgroundColor = \"black\";\n            document.querySelector('.header').style.color = \"white\";\n        }\n\n    }\n}\n\nexport default Common;\n","import Common from './common.js';\n\nclass Number extends Common{\n\n    numberElement = null;\n\n    spawn(){\n        // const emptyCellIndex = grid.randomEmptyCell();\n\n        // if(emptyCellIndex === false) return false;\n\n        const numberElement = document.createElement('div');\n        const numberValues = [2,4,8,16];\n        let value = numberValues[ Math.floor(Math.random() * numberValues.length)];\n        numberElement.innerText = value;\n        numberElement.dataset.value = value;\n\n        numberElement.classList.add(\"number\");\n        this.numberElement = numberElement;\n        return numberElement;\n\n    }\n\n    moveTo(fromCell, toCell) {\n        // const number = fromCell.number;\n        const field = document.querySelector('.field'); \n        if(toCell.number === null) {\n            // target cell is empty fill with number\n            fromCell.number.numberElement.style.top = `${toCell.top}px`;\n            fromCell.number.numberElement.style.left = `${toCell.left}px`;\n            \n            toCell.number = fromCell.number;\n            fromCell.number = null;\n        } else if (fromCell.number.numberElement.dataset.value === toCell.number.numberElement.dataset.value) {\n            // target cell has same fromCell\n            // merge both cell\n            fromCell.number.numberElement.style.top = `${toCell.top}px`;\n            fromCell.number.numberElement.style.left = `${toCell.left}px`;\n            fromCell.number.numberElement.style.opacity = '0';\n            // remove number DOM element after transition\n            field.removeChild(fromCell.number.numberElement);\n            \n\n\n            // double target cell's number\n            const newNumberValue = toCell.number.numberElement.dataset.value * 2;\n            toCell.number.numberElement.dataset.value = newNumberValue;\n\n            toCell.number.numberElement.innerText = newNumberValue;\n\n            this.setColor(toCell.number.numberElement); //extended\n            fromCell.number = null;\n        }\n    }\n}\nexport default Number;\n","import number from './number.js';\nimport Common from './common.js';\n\nclass Grid extends Common {\n    #size;\n    field = document.querySelector('.field');\n    cells = [];\n    #play = false;\n    directionRoots = {\n        'UP': [],\n        'RIGHT': [],\n        'DOWN': [],\n        'LEFT': []\n    }\n    getSize() {\n        return this.#size;\n    }\n    setsize(value){\n        if (value > 0) this.#size = value;\n    }\n    get playable(){\n        return this.#play;\n    }\n    set playable(e){\n        this.#play = e;\n    }\n\n    restart(){\n        this.cells = [];\n        this.directionRoots = {\n            'UP': [],\n            'RIGHT': [],\n            'DOWN': [],\n            'LEFT': []\n        }\n        document.querySelector('.game').style.backgroundColor = '#AAACA8';\n        let numbers = document.getElementsByClassName('number');\n        let cells = document.getElementsByClassName('cell');\n        while(cells[0]) {\n            cells[0].parentNode.removeChild(cells[0]);\n        };\n        while(numbers[0]) {\n            numbers[0].parentNode.removeChild(numbers[0]);\n        };\n        this.init();\n    }\n\n    setDirectionRoots(){\n        for(let i = 0; i<this.getSize()**2;i++){\n            if(i<this.getSize()) this.directionRoots['UP'].push(i);\n            if(i%this.getSize()===this.getSize()-1) this.directionRoots['RIGHT'].push(i);\n            if(i>=this.getSize()*(this.getSize() - 1 )) this.directionRoots['DOWN'].push(i);\n            if(i%this.getSize()===0) this.directionRoots['LEFT'].push(i);\n        }\n    }\n\n    init() {\n        this.playable = true;\n\n        let element = document.createElement('div');\n        element.classList.add('cell');\n\n        this.setDirectionRoots();\n        if(localStorage.getItem('best')) document.querySelector('#best').innerHTML = localStorage.getItem('best'); \n        for(let i = 0; i<this.getSize()**2; i++){\n            let element = document.createElement('div');\n            element.style.width = `calc(100%/${this.getSize()} - 1.5vmin)`;\n            element.style.height = `calc(100%/${this.getSize()} - 1.5vmin)`;\n            element.classList.add('cell');\n            this.field.append(element);\n            this.cells[i] ={\n                element: element,\n                number: null\n            }\n        }\n        let cellsForBalance = document.querySelectorAll('.cell');\n        let size = this.getSize();\n        for(let i = 0; i< size**2;i++){\n            this.cells[i].top = cellsForBalance[i].offsetTop;\n            this.cells[i].left = cellsForBalance[i].offsetLeft;\n        }\n        this.gridTakePlace();\n\n    }\n\n    gridTakePlace(){\n        const emptyCellIndex = this.randomEmptyCell();\n\n        if(emptyCellIndex === false||this.playable===false) return false;\n\n        let test = new number();\n\n        let numberElement =  test.spawn();\n        \n        \n        numberElement.style.top = `${this.cells[emptyCellIndex].top}px`;\n        numberElement.style.left = `${this.cells[emptyCellIndex].left}px`;\n        numberElement.style.width = `calc(100%/${this.getSize()} - 1.5vmin)`;\n        numberElement.style.height = `calc(100%/${this.getSize()} - 1.5vmin)`;\n\n        this.setColor(numberElement);\n\n        \n\n        this.cells[emptyCellIndex].number = test;\n        this.field.append(numberElement);\n        this.score();\n        return true;\n    }\n\n    score(){\n        let nums = document.querySelectorAll('.number');\n        let sum = 0;\n        nums.forEach(item=>{\n            sum += +item.innerText;\n        });\n        let id = document.querySelector('#score');\n        id.innerText = sum;\n        if(sum>200){\n            this.setColor(sum);\n        }\n    }\n\n\n    randomEmptyCell(){\n        let emptyCells = [];\n\n        for(let i = 0; i< this.cells.length; i++){\n            if( this.cells[i].number === null) emptyCells.push(i);\n        }\n        if (emptyCells.length===0) return false;\n        return emptyCells[ Math.floor(Math.random() * emptyCells.length) ];\n    }\n    slide(direction) {\n        if(!this.playable) return false;\n        \n        const roots = this.directionRoots[direction];\n\n        let increment;\n        if(direction===\"DOWN\") increment = -this.getSize();\n        if(direction===\"UP\") increment = this.getSize();\n        if(direction ===\"RIGHT\") increment = -1;\n        if(direction ===\"LEFT\") increment = 1;\n\n        for(let i = 0; i <this.getSize(); i++){// в каждой линии корня\n            const root = roots[i];\n            \n            for(let j = 1; j<this.getSize(); j++){ // в каждой ячейке линии корня выше самого корня\n                const cellIndex = root + (j*increment); \n                const cell = this.cells[cellIndex];\n\n                if(cell.number !== null){\n                    let moveToCell = null;\n\n                    for (let k = j-1; k >= 0; k--) {\n                        const foreCellIndex = root + (k * increment);\n                        const foreCell = this.cells[foreCellIndex];\n\n                        if(foreCell.number === null) {\n                            // the cell is empty, move to and check next cell\n                            moveToCell = foreCell;\n                        } else if (cell.number.numberElement.dataset.value === foreCell.number.numberElement.dataset.value) {\n                            // the cell has same number, move, merge and stop\n                            moveToCell = foreCell;\n                            break;\n                        } else {\n                            // next cell is not empty and not same with moving number(number is moving cell is not)\n                            // number can't go further\n                            break;\n                        }\n                    }\n\n                    if(moveToCell !== null) {\n                        cell.number.moveTo(cell, moveToCell);\n                    }\n                }\n            }\n\n        }\n        this.playable = false;\n        setTimeout(()=>{\n            this.playable = true;\n            if(this.gridTakePlace()) {\n                this.playable = true;\n            } else{\n                this.playable = false;\n                if(!localStorage.getItem('best')||localStorage.getItem('best')<document.querySelector('#score')){\n                    localStorage.setItem('best', document.querySelector('#score').innerText);\n                    document.querySelector('#best').innerText = localStorage.getItem('best');\n                } \n                alert(\"GAME OVER!\");\n                this.restart();\n                \n            }\n        }, 200)\n    }\n}\n\n\nexport default Grid;","import Grid from \"./grid.js\";\n\nlet grid;\ndocument.querySelector('input').addEventListener('keydown',(e)=>{\n    if(e.keyCode === 13){\n        if(!isNaN(+document.querySelector('input').value)&&+document.querySelector('input').value>0&&+document.querySelector('input').value<15){\n            document.querySelector('.modal').classList.add('hide');\n            grid = new Grid(); \n            grid.setsize(+document.querySelector('input').value);\n\n            grid.init();\n            document.querySelector('input').remove();\n        } else{\n            document.querySelector('input').value = \"Введите корректное значение\";\n        }\n    }\n});\n\nwindow.addEventListener('resize',()=>{\n    if(grid){\n        let cellsForBalance = document.querySelectorAll('.cell');\n        for(let i =0; i<grid.cells.length; i++){\n            grid.cells[i].top = cellsForBalance[i].offsetTop;\n            grid.cells[i].left = cellsForBalance[i].offsetLeft;\n            if(grid.cells[i].number){\n                    grid.cells[i].number.numberElement.style.top = `${grid.cells[i].top}px`;\n                    grid.cells[i].number.numberElement.style.left = `${grid.cells[i].left}px`;\n            }\n        }\n    }\n});\n\n\n\n\n\n \n\ndocument.addEventListener(\"keyup\", function(e) {\n    let direction = null;\n\n    if(e.keyCode === 38) {\n        direction = \"UP\";\n    } else if(e.keyCode === 39) {\n        direction = \"RIGHT\";\n    } else if(e.keyCode === 40) {\n        direction = \"DOWN\";\n    } else if(e.keyCode === 37) {\n        direction = \"LEFT\";\n    }\n\n    if(direction !== null) {\n        grid.slide(direction);\n    }\n\n    return false;\n});"],"names":["setColor","e","dataset","value","style","backgroundColor","document","querySelector","color","numberElement","spawn","createElement","numberValues","Math","floor","random","length","innerText","classList","add","this","moveTo","fromCell","toCell","field","number","top","left","opacity","removeChild","newNumberValue","cells","directionRoots","getSize","setsize","playable","restart","numbers","getElementsByClassName","parentNode","init","setDirectionRoots","i","push","localStorage","getItem","innerHTML","element","width","height","append","cellsForBalance","querySelectorAll","size","offsetTop","offsetLeft","gridTakePlace","emptyCellIndex","randomEmptyCell","test","score","nums","sum","forEach","item","emptyCells","slide","direction","roots","increment","root","j","cellIndex","cell","moveToCell","k","foreCellIndex","foreCell","setTimeout","setItem","alert","addEventListener","keyCode","isNaN","remove","window"],"sourceRoot":""}